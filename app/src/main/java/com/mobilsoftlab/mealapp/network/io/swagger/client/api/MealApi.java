/*
 * Mealapp api descriptor
 * This is a meal app android client.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: palko9711@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.mobilsoftlab.mealapp.network.io.swagger.client.api;

import com.mobilsoftlab.mealapp.network.io.swagger.client.ApiCallback;
import com.mobilsoftlab.mealapp.network.io.swagger.client.ApiClient;
import com.mobilsoftlab.mealapp.network.io.swagger.client.ApiException;
import com.mobilsoftlab.mealapp.network.io.swagger.client.ApiResponse;
import com.mobilsoftlab.mealapp.network.io.swagger.client.Configuration;
import com.mobilsoftlab.mealapp.network.io.swagger.client.Pair;
import com.mobilsoftlab.mealapp.network.io.swagger.client.ProgressRequestBody;
import com.mobilsoftlab.mealapp.network.io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mobilsoftlab.mealapp.network.io.swagger.client.model.CategoryList;
import com.mobilsoftlab.mealapp.network.io.swagger.client.model.CategoryListFilter;
import com.mobilsoftlab.mealapp.network.io.swagger.client.model.MealList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MealApi {
    private ApiClient apiClient;

    public MealApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MealApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCategories
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCategoriesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories.php";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCategoriesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCategoriesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all meal categories
     * Returns a list of meal categories.
     * @return CategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CategoryList getCategories() throws ApiException {
        ApiResponse<CategoryList> resp = getCategoriesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all meal categories
     * Returns a list of meal categories.
     * @return ApiResponse&lt;CategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CategoryList> getCategoriesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCategoriesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CategoryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all meal categories (asynchronously)
     * Returns a list of meal categories.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCategoriesAsync(final ApiCallback<CategoryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCategoriesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CategoryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMealById
     * @param i The meal that needs to be fetched. Use 52772 for testing. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMealByIdCall(String i, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookup.php";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (i != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("i", i));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMealByIdValidateBeforeCall(String i, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'i' is set
        if (i == null) {
            throw new ApiException("Missing the required parameter 'i' when calling getMealById(Async)");
        }
        

        com.squareup.okhttp.Call call = getMealByIdCall(i, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get meal details by id
     * 
     * @param i The meal that needs to be fetched. Use 52772 for testing. (required)
     * @return MealList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MealList getMealById(String i) throws ApiException {
        ApiResponse<MealList> resp = getMealByIdWithHttpInfo(i);
        return resp.getData();
    }

    /**
     * Get meal details by id
     * 
     * @param i The meal that needs to be fetched. Use 52772 for testing. (required)
     * @return ApiResponse&lt;MealList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MealList> getMealByIdWithHttpInfo(String i) throws ApiException {
        com.squareup.okhttp.Call call = getMealByIdValidateBeforeCall(i, null, null);
        Type localVarReturnType = new TypeToken<MealList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get meal details by id (asynchronously)
     * 
     * @param i The meal that needs to be fetched. Use 52772 for testing. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMealByIdAsync(String i, final ApiCallback<MealList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMealByIdValidateBeforeCall(i, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MealList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMealsByCategory
     * @param c The category that needs to be fetched. Use Seafood for testing. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMealsByCategoryCall(String c, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filter.php";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (c != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("c", c));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMealsByCategoryValidateBeforeCall(String c, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'c' is set
        if (c == null) {
            throw new ApiException("Missing the required parameter 'c' when calling getMealsByCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = getMealsByCategoryCall(c, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get meals by category
     * 
     * @param c The category that needs to be fetched. Use Seafood for testing. (required)
     * @return CategoryListFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CategoryListFilter getMealsByCategory(String c) throws ApiException {
        ApiResponse<CategoryListFilter> resp = getMealsByCategoryWithHttpInfo(c);
        return resp.getData();
    }

    /**
     * Get meals by category
     * 
     * @param c The category that needs to be fetched. Use Seafood for testing. (required)
     * @return ApiResponse&lt;CategoryListFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CategoryListFilter> getMealsByCategoryWithHttpInfo(String c) throws ApiException {
        com.squareup.okhttp.Call call = getMealsByCategoryValidateBeforeCall(c, null, null);
        Type localVarReturnType = new TypeToken<CategoryListFilter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get meals by category (asynchronously)
     * 
     * @param c The category that needs to be fetched. Use Seafood for testing. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMealsByCategoryAsync(String c, final ApiCallback<CategoryListFilter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMealsByCategoryValidateBeforeCall(c, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CategoryListFilter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
